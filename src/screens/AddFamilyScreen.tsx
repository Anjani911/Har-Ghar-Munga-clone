import React, { useState } from 'react';
import { StyleSheet, View, ScrollView, Alert, Image } from 'react-native';
import { Card, Title, Button, Surface, Text, TextInput, Appbar, RadioButton, Chip, Dialog, Portal, Paragraph } from 'react-native-paper';
import { LinearGradient } from 'expo-linear-gradient';
import * as ImagePicker from 'expo-image-picker';

interface AddFamilyScreenProps {
  navigation: any;
}

export default function AddFamilyScreen({ navigation }: AddFamilyScreenProps) {
  const [formData, setFormData] = useState({
    // ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä
    childName: '',
    gender: '‡§≤‡§°‡§º‡§ï‡§æ',
    dateOfBirth: '',
    age: '',
    weight: '',
    height: '',
    anganwadiCenterName: '‡§∏‡§∞‡§∏‡•ç‡§µ‡§§‡•Ä ‡§Ü‡§Ç‡§ó‡§®‡§¨‡§æ‡§°‡§º‡•Ä ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞',
    anganwadiCode: 'AWC-123-DLH',
    
    // ‡§Æ‡§æ‡§§‡§æ-‡§™‡§ø‡§§‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä
    motherName: '',
    fatherName: '',
    mobileNumber: '',
    village: '',
    ward: '',
    panchayat: '',
    district: '',
    
    // ‡§Æ‡•Ç‡§Ç‡§ó‡§æ ‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä
    distributionDate: '',
    
    // ‡§∏‡•ç‡§•‡§æ‡§® ‡§î‡§∞ ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä
    workerName: '‡§∂‡•ç‡§∞‡•Ä‡§Æ‡§§‡•Ä ‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§¶‡•á‡§µ‡•Ä',
    workerCode: 'AWW-123',
    block: '',
    registrationDate: new Date().toLocaleDateString('hi-IN'),
  });
  
  const [photos, setPhotos] = useState({
    plantPhoto: null as string | null,
    pledgePhoto: null as string | null,
  });
  
  const [loading, setLoading] = useState(false);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const pickImage = async (photoType: 'plantPhoto' | 'pledgePhoto') => {
    // Request permission to access camera
    const permissionResult = await ImagePicker.requestCameraPermissionsAsync();
    
    if (permissionResult.granted === false) {
      Alert.alert('‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï', '‡§ï‡•à‡§Æ‡§∞‡§æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç');
      return;
    }

    const result = await ImagePicker.launchCameraAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setPhotos(prev => ({ ...prev, [photoType]: result.assets[0].uri }));
    }
  };

  const pickFromGallery = async (photoType: 'plantPhoto' | 'pledgePhoto') => {
    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
    
    if (permissionResult.granted === false) {
      Alert.alert('‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï', '‡§ó‡•à‡§≤‡§∞‡•Ä ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç');
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setPhotos(prev => ({ ...prev, [photoType]: result.assets[0].uri }));
    }
  };

  const showImageOptions = (photoType: 'plantPhoto' | 'pledgePhoto', title: string) => {
    Alert.alert(
      '‡§´‡•ã‡§ü‡•ã ‡§ö‡•Å‡§®‡•á‡§Ç',
      title,
      [
        { text: '‡§ï‡•à‡§Æ‡§∞‡§æ', onPress: () => pickImage(photoType) },
        { text: '‡§ó‡•à‡§≤‡§∞‡•Ä', onPress: () => pickFromGallery(photoType) },
        { text: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç', style: 'cancel' },
      ]
    );
  };

  const handleSubmit = async () => {
    // Validate form
    if (!formData.childName || !formData.age || !formData.motherName || !formData.fatherName || !formData.mobileNumber || !formData.village || !formData.district || !formData.block) {
      Alert.alert('‡§§‡•ç‡§∞‡•Å‡§ü‡§ø', '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç');
      return;
    }

    if (!photos.plantPhoto) {
      Alert.alert('‡§§‡•ç‡§∞‡•Å‡§ü‡§ø', '‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç');
      return;
    }

    if (!photos.pledgePhoto) {
      Alert.alert('‡§§‡•ç‡§∞‡•Å‡§ü‡§ø', '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∂‡§™‡§• ‡§™‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç');
      return;
    }

    // Show confirmation dialog
    setShowConfirmDialog(true);
  };

  const confirmRegistration = async () => {
    setShowConfirmDialog(false);
    setLoading(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      Alert.alert(
        '‡§∏‡§´‡§≤‡§§‡§æ!',
        '‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡§æ ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§π‡•ã ‡§ó‡§Ø‡§æ',
        [{ text: '‡§†‡•Ä‡§ï ‡§π‡•à', onPress: () => navigation.goBack() }]
      );
    } catch (error) {
      Alert.alert('‡§§‡•ç‡§∞‡•Å‡§ü‡§ø', '‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç');
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <LinearGradient
        colors={['#2E7D32', '#4CAF50', '#66BB6A']}
        style={styles.backgroundGradient}
      />
      
      {/* Header */}
      <Appbar.Header style={styles.header}>
        <Appbar.BackAction onPress={() => navigation.goBack()} color="#FFFFFF" />
        <Appbar.Content title="‡§®‡§Ø‡§æ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£" titleStyle={styles.headerTitle} />
      </Appbar.Header>

      <ScrollView contentContainerStyle={styles.scrollContent} showsVerticalScrollIndicator={false}>
        {/* ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä */}
        <Surface style={styles.formContainer}>
          <Title style={styles.sectionTitle}>üîπ ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</Title>
          
          {/* Child Name */}
          <TextInput
            label="‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡§æ ‡§®‡§æ‡§Æ *"
            value={formData.childName}
            onChangeText={(text) => handleInputChange('childName', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="account" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          {/* Gender */}
          <Text style={styles.fieldLabel}>‡§≤‡§ø‡§Ç‡§ó *</Text>
          <View style={styles.radioGroup}>
            <View style={styles.radioItem}>
              <RadioButton
                value="‡§≤‡§°‡§º‡§ï‡§æ"
                status={formData.gender === '‡§≤‡§°‡§º‡§ï‡§æ' ? 'checked' : 'unchecked'}
                onPress={() => handleInputChange('gender', '‡§≤‡§°‡§º‡§ï‡§æ')}
                color="#4CAF50"
              />
              <Text style={styles.radioLabel}>‡§≤‡§°‡§º‡§ï‡§æ</Text>
            </View>
            <View style={styles.radioItem}>
              <RadioButton
                value="‡§≤‡§°‡§º‡§ï‡•Ä"
                status={formData.gender === '‡§≤‡§°‡§º‡§ï‡•Ä' ? 'checked' : 'unchecked'}
                onPress={() => handleInputChange('gender', '‡§≤‡§°‡§º‡§ï‡•Ä')}
                color="#4CAF50"
              />
              <Text style={styles.radioLabel}>‡§≤‡§°‡§º‡§ï‡•Ä</Text>
            </View>
          </View>

          {/* Date of Birth */}
          <TextInput
            label="‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø (DD/MM/YYYY) *"
            value={formData.dateOfBirth}
            onChangeText={(text) => handleInputChange('dateOfBirth', text)}
            mode="outlined"
            style={styles.input}
            placeholder="01/01/2020"
            left={<TextInput.Icon icon="calendar" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          {/* Age */}
          <TextInput
            label="‡§Ü‡§Ø‡•Å (‡§µ‡§∞‡•ç‡§∑‡•ã‡§Ç ‡§Æ‡•á‡§Ç) *"
            value={formData.age}
            onChangeText={(text) => handleInputChange('age', text)}
            mode="outlined"
            style={styles.input}
            keyboardType="numeric"
            placeholder="‡§â‡§¶‡§æ‡§π‡§∞‡§£: 4"
            left={<TextInput.Icon icon="clock-outline" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          {/* Weight */}
          <TextInput
            label="‡§µ‡§ú‡§® (‡§ï‡§ø‡§≤‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§Æ‡•á‡§Ç)"
            value={formData.weight}
            onChangeText={(text) => handleInputChange('weight', text)}
            mode="outlined"
            style={styles.input}
            keyboardType="numeric"
            placeholder="‡§â‡§¶‡§æ‡§π‡§∞‡§£: 15.5"
            left={<TextInput.Icon icon="scale" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          {/* Height */}
          <TextInput
            label="‡§≤‡§Ç‡§¨‡§æ‡§à (‡§∏‡•á‡§Ç‡§ü‡•Ä‡§Æ‡•Ä‡§ü‡§∞ ‡§Æ‡•á‡§Ç)"
            value={formData.height}
            onChangeText={(text) => handleInputChange('height', text)}
            mode="outlined"
            style={styles.input}
            keyboardType="numeric"
            placeholder="‡§â‡§¶‡§æ‡§π‡§∞‡§£: 95"
            left={<TextInput.Icon icon="human-male-height" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          {/* Anganwadi Center */}
          <TextInput
            label="‡§Ü‡§Ç‡§ó‡§®‡§µ‡§æ‡§°‡§º‡•Ä ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§ï‡§æ ‡§®‡§æ‡§Æ"
            value={formData.anganwadiCenterName}
            onChangeText={(text) => handleInputChange('anganwadiCenterName', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="home-city-outline" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          <TextInput
            label="‡§Ü‡§Ç‡§ó‡§®‡§µ‡§æ‡§°‡§º‡•Ä ‡§ï‡•ã‡§°"
            value={formData.anganwadiCode}
            onChangeText={(text) => handleInputChange('anganwadiCode', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="barcode" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />
        </Surface>

        {/* ‡§Æ‡§æ‡§§‡§æ-‡§™‡§ø‡§§‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä */}
        <Surface style={styles.formContainer}>
          <Title style={styles.sectionTitle}>üîπ ‡§Æ‡§æ‡§§‡§æ-‡§™‡§ø‡§§‡§æ / ‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</Title>
          
          <TextInput
            label="‡§Æ‡§æ‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ *"
            value={formData.motherName}
            onChangeText={(text) => handleInputChange('motherName', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="account-heart" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          <TextInput
            label="‡§™‡§ø‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ / ‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ *"
            value={formData.fatherName}
            onChangeText={(text) => handleInputChange('fatherName', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="account-tie" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          <TextInput
            label="‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ *"
            value={formData.mobileNumber}
            onChangeText={(text) => handleInputChange('mobileNumber', text)}
            mode="outlined"
            style={styles.input}
            keyboardType="phone-pad"
            maxLength={10}
            left={<TextInput.Icon icon="phone" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          <Title style={styles.subSectionTitle}>‡§™‡§§‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</Title>
          
          <TextInput
            label="‡§ó‡§æ‡§Å‡§µ *"
            value={formData.village}
            onChangeText={(text) => handleInputChange('village', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="home-group" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          <TextInput
            label="‡§µ‡§æ‡§∞‡•ç‡§°"
            value={formData.ward}
            onChangeText={(text) => handleInputChange('ward', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="map-marker-outline" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          <TextInput
            label="‡§™‡§Ç‡§ö‡§æ‡§Ø‡§§"
            value={formData.panchayat}
            onChangeText={(text) => handleInputChange('panchayat', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="account-group" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          <TextInput
            label="‡§ú‡§ø‡§≤‡§æ *"
            value={formData.district}
            onChangeText={(text) => handleInputChange('district', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="map" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />
        </Surface>

        {/* ‡§Æ‡•Ç‡§Ç‡§ó‡§æ ‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä */}
        <Surface style={styles.formContainer}>
          <Title style={styles.sectionTitle}>üîπ ‡§Æ‡•Ç‡§Ç‡§ó‡§æ ‡§™‡•å‡§ß‡•á ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</Title>
          
          <TextInput
            label="‡§™‡•å‡§ß‡§æ ‡§µ‡§ø‡§§‡§∞‡§£ ‡§§‡§ø‡§•‡§ø (DD/MM/YYYY) *"
            value={formData.distributionDate}
            onChangeText={(text) => handleInputChange('distributionDate', text)}
            mode="outlined"
            style={styles.input}
            placeholder="‡§Ü‡§ú ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ"
            left={<TextInput.Icon icon="calendar-check" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />
        </Surface>

        {/* Photo Upload Section */}
        <Surface style={styles.photoContainer}>
          <Title style={styles.sectionTitle}>‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã *</Title>
          <Text style={styles.photoInstruction}>
            ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•ã ‡§Æ‡•Å‡§Ç‡§ó‡•á ‡§ï‡§æ ‡§™‡•á‡§°‡§º ‡§¶‡•á‡§§‡•á ‡§π‡•Å‡§è ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç
          </Text>
          
          {photos.plantPhoto ? (
            <View style={styles.photoPreview}>
              <Image source={{ uri: photos.plantPhoto }} style={styles.previewImage} />
              <Button 
                mode="outlined" 
                onPress={() => showImageOptions('plantPhoto', '‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•ã ‡§Æ‡•Å‡§Ç‡§ó‡•á ‡§ï‡§æ ‡§™‡•á‡§°‡§º ‡§¶‡•á‡§§‡•á ‡§π‡•Å‡§è ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç')}
                style={styles.changePhotoButton}
                textColor="#4CAF50"
              >
                ‡§´‡•ã‡§ü‡•ã ‡§¨‡§¶‡§≤‡•á‡§Ç
              </Button>
            </View>
          ) : (
            <Button 
              mode="contained" 
              icon="camera"
              onPress={() => showImageOptions('plantPhoto', '‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•ã ‡§Æ‡•Å‡§Ç‡§ó‡•á ‡§ï‡§æ ‡§™‡•á‡§°‡§º ‡§¶‡•á‡§§‡•á ‡§π‡•Å‡§è ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç')}
              style={styles.photoButton}
              buttonColor="#4CAF50"
            >
              ‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç
            </Button>
          )}
        </Surface>

        {/* Pledge Photo Section */}
        <Surface style={styles.photoContainer}>
          <Title style={styles.sectionTitle}>‡§∂‡§™‡§• ‡§™‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã *</Title>
          <Text style={styles.photoInstruction}>
            ‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞‡§ø‡§§ ‡§∂‡§™‡§• ‡§™‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç
          </Text>
          
          {photos.pledgePhoto ? (
            <View style={styles.photoPreview}>
              <Image source={{ uri: photos.pledgePhoto }} style={styles.previewImage} />
              <Button 
                mode="outlined" 
                onPress={() => showImageOptions('pledgePhoto', '‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞‡§ø‡§§ ‡§∂‡§™‡§• ‡§™‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç')}
                style={styles.changePhotoButton}
                textColor="#4CAF50"
              >
                ‡§´‡•ã‡§ü‡•ã ‡§¨‡§¶‡§≤‡•á‡§Ç
              </Button>
            </View>
          ) : (
            <Button 
              mode="contained" 
              icon="camera"
              onPress={() => showImageOptions('pledgePhoto', '‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞‡§ø‡§§ ‡§∂‡§™‡§• ‡§™‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç')}
              style={styles.photoButton}
              buttonColor="#4CAF50"
            >
              ‡§∂‡§™‡§• ‡§™‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç
            </Button>
          )}
        </Surface>

        {/* ‡§∏‡•ç‡§•‡§æ‡§® ‡§î‡§∞ ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä */}
        <Surface style={styles.formContainer}>
          <Title style={styles.sectionTitle}>üîπ ‡§∏‡•ç‡§•‡§æ‡§® ‡§î‡§∞ ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</Title>
          
          <TextInput
            label="‡§Ü‡§Ç‡§ó‡§®‡§¨‡§æ‡§°‡§º‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ"
            value={formData.workerName}
            onChangeText={(text) => handleInputChange('workerName', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="account-star" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          <TextInput
            label="‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•ã‡§°"
            value={formData.workerCode}
            onChangeText={(text) => handleInputChange('workerCode', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="card-account-details" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          <TextInput
            label="‡§µ‡§ø‡§ï‡§æ‡§∏‡§ñ‡§Ç‡§° (Block) *"
            value={formData.block}
            onChangeText={(text) => handleInputChange('block', text)}
            mode="outlined"
            style={styles.input}
            left={<TextInput.Icon icon="city" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />

          <TextInput
            label="‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ"
            value={formData.registrationDate}
            editable={false}
            mode="outlined"
            style={[styles.input, styles.disabledInput]}
            left={<TextInput.Icon icon="calendar-today" color="#4CAF50" />}
            outlineColor="#E0E0E0"
            activeOutlineColor="#4CAF50"
            theme={{ colors: { primary: '#4CAF50' } }}
          />
        </Surface>

        {/* Submit Button */}
        <Button 
          mode="contained" 
          onPress={handleSubmit}
          loading={loading}
          disabled={loading}
          style={styles.submitButton}
          contentStyle={styles.submitButtonContent}
          labelStyle={styles.submitButtonText}
          buttonColor="#2E7D32"
        >
          {loading ? '‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...' : '‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡•á‡§Ç'}
        </Button>
      </ScrollView>

      {/* Confirmation Dialog */}
      <Portal>
        <Dialog visible={showConfirmDialog} onDismiss={() => setShowConfirmDialog(false)}>
          <Dialog.Title style={styles.dialogTitle}>‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡•á‡§Ç</Dialog.Title>
          <Dialog.Content>
            <Surface style={styles.confirmationCard}>
              <Text style={styles.confirmationTitle}>üîπ ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</Text>
              <Text style={styles.confirmationText}>‡§®‡§æ‡§Æ: {formData.childName}</Text>
              <Text style={styles.confirmationText}>‡§≤‡§ø‡§Ç‡§ó: {formData.gender}</Text>
              <Text style={styles.confirmationText}>‡§Ü‡§Ø‡•Å: {formData.age} ‡§µ‡§∞‡•ç‡§∑</Text>
              {formData.weight && <Text style={styles.confirmationText}>‡§µ‡§ú‡§®: {formData.weight} ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ</Text>}
              {formData.height && <Text style={styles.confirmationText}>‡§≤‡§Ç‡§¨‡§æ‡§à: {formData.height} ‡§∏‡•á‡§Æ‡•Ä</Text>}
              
              <Text style={[styles.confirmationTitle, { marginTop: 16 }]}>üîπ ‡§Æ‡§æ‡§§‡§æ-‡§™‡§ø‡§§‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</Text>
              <Text style={styles.confirmationText}>‡§Æ‡§æ‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ: {formData.motherName}</Text>
              <Text style={styles.confirmationText}>‡§™‡§ø‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ: {formData.fatherName}</Text>
              <Text style={styles.confirmationText}>‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤: {formData.mobileNumber}</Text>
              <Text style={styles.confirmationText}>‡§ó‡§æ‡§Å‡§µ: {formData.village}</Text>
              <Text style={styles.confirmationText}>‡§ú‡§ø‡§≤‡§æ: {formData.district}</Text>
              
              <Text style={[styles.confirmationTitle, { marginTop: 16 }]}>üîπ ‡§≤‡•â‡§ó‡§ø‡§® ‡§µ‡§ø‡§µ‡§∞‡§£</Text>
              <Surface style={styles.loginCredentials}>
                <Text style={styles.credentialLabel}>‡§Ø‡•Ç‡§ú‡§∞‡§®‡•á‡§Æ:</Text>
                <Text style={styles.credentialValue}>{formData.mobileNumber}</Text>
                <Text style={styles.credentialLabel}>‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°:</Text>
                <Text style={styles.credentialValue}>{formData.mobileNumber}</Text>
                <Text style={styles.credentialNote}>
                  üì± ‡§Ö‡§™‡§®‡•á ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§∏‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç
                </Text>
              </Surface>
            </Surface>
          </Dialog.Content>
          <Dialog.Actions>
            <Button onPress={() => setShowConfirmDialog(false)} textColor="#666">
              ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç
            </Button>
            <Button onPress={confirmRegistration} mode="contained" buttonColor="#2E7D32">
              ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡•á‡§Ç
            </Button>
          </Dialog.Actions>
        </Dialog>
      </Portal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  backgroundGradient: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
  },
  header: {
    backgroundColor: 'transparent',
    elevation: 0,
  },
  headerTitle: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
  },
  scrollContent: {
    flexGrow: 1,
    padding: 20,
    paddingBottom: 100,
  },
  formContainer: {
    padding: 20,
    backgroundColor: '#ffffff',
    borderRadius: 16,
    elevation: 6,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1a1a1a',
    marginBottom: 16,
  },
  subSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2E7D32',
    marginTop: 16,
    marginBottom: 12,
  },
  input: {
    marginBottom: 16,
    backgroundColor: '#ffffff',
    borderRadius: 12,
  },
  fieldLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1a1a1a',
    marginBottom: 8,
    marginTop: 8,
  },
  radioGroup: {
    flexDirection: 'row',
    marginBottom: 16,
    justifyContent: 'space-around',
  },
  radioItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  radioLabel: {
    fontSize: 14,
    color: '#1a1a1a',
    marginLeft: 4,
  },
  chipContainer: {
    flexDirection: 'row',
    gap: 12,
    marginBottom: 16,
  },
  chip: {
    backgroundColor: '#F5F5F5',
  },
  selectedChip: {
    backgroundColor: '#E8F5E8',
  },
  chipText: {
    color: '#666666',
  },
  selectedChipText: {
    color: '#4CAF50',
    fontWeight: '600',
  },
  disabledInput: {
    opacity: 0.7,
  },
  photoContainer: {
    padding: 20,
    backgroundColor: '#ffffff',
    borderRadius: 16,
    elevation: 6,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    alignItems: 'center',
  },
  photoInstruction: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    marginBottom: 20,
    lineHeight: 20,
  },
  photoButton: {
    borderRadius: 12,
    paddingVertical: 8,
    paddingHorizontal: 24,
  },
  photoPreview: {
    alignItems: 'center',
  },
  previewImage: {
    width: 200,
    height: 150,
    borderRadius: 12,
    marginBottom: 16,
  },
  changePhotoButton: {
    borderRadius: 12,
  },
  submitButton: {
    borderRadius: 12,
    elevation: 4,
    shadowColor: '#4CAF50',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
  },
  submitButtonContent: {
    paddingVertical: 12,
  },
  submitButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
  // Dialog styles
  dialogTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2E7D32',
    textAlign: 'center',
  },
  confirmationCard: {
    padding: 16,
    backgroundColor: '#F8F9FA',
    borderRadius: 12,
    marginVertical: 8,
  },
  confirmationTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2E7D32',
    marginBottom: 8,
  },
  confirmationText: {
    fontSize: 14,
    color: '#333',
    marginBottom: 4,
    paddingLeft: 8,
  },
  loginCredentials: {
    backgroundColor: '#E8F5E8',
    padding: 12,
    borderRadius: 8,
    marginTop: 8,
  },
  credentialLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#2E7D32',
    marginTop: 4,
  },
  credentialValue: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1a1a1a',
    backgroundColor: '#fff',
    padding: 8,
    borderRadius: 6,
    marginTop: 2,
    marginBottom: 8,
    textAlign: 'center',
  },
  credentialNote: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
    fontStyle: 'italic',
    marginTop: 4,
  },
});
